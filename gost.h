#pragma once

#include "encryptor.h"

#include <cstdint>
#include <vector>
#include <QtDebug>

class EncryptorGOST_28147_89 : public AbstractEncryptor {

public:
    EncryptorGOST_28147_89();
    EncryptorGOST_28147_89(uint32_t key[8]);
    ~EncryptorGOST_28147_89() override;

    // XOR mode with inverse connection
    std::vector<uint8_t> *encrypt(const std::vector<uint8_t> &data) override;

    // XOR mode with inverse connection
    std::vector<uint8_t> *decrypt(const std::vector<uint8_t> &cipher) override;

    #ifdef QT_DEBUG
        void print() override;
    #endif

    uint32_t key[8] = {};
    uint32_t seed = 0;

private:

    // Table of substitutions defined by the Technical Committee for standardization 
    // "Cryptographic information security "(abbreviated as TC 26) of Rosstandart.
    // ID: id-tc26-gost-28147-param-Z.
    uint8_t replacements[8][16] = {
        {0xC, 0x4, 0x6, 0x2, 0xA, 0x5, 0xB, 0x9, 0xE, 0x8, 0xD ,0x7, 0x0, 0x3, 0xF, 0x1},
        {0x6, 0x8, 0x2, 0x3, 0x9, 0xA, 0x5, 0xC, 0x1, 0xE, 0x4, 0x7, 0xB, 0xD, 0x0, 0xF},
        {0xB, 0x3, 0x5, 0x8, 0x2, 0xF, 0xA, 0xD, 0xE, 0x1, 0x7, 0x4, 0xC, 0x9, 0x6, 0x0},
        {0xC, 0x8, 0x2, 0x1, 0xD, 0x4, 0xF, 0x6, 0x7, 0x0, 0xA, 0x5, 0x3, 0xE, 0x9, 0xB},
        {0x7, 0xF, 0x5, 0xA, 0x8, 0x1, 0x6, 0xD, 0x0, 0x9, 0x3, 0xE, 0xB, 0x4, 0x2, 0xC},
        {0x5, 0xD, 0xF, 0x6, 0x9, 0x2, 0xC, 0xA, 0xB, 0x7, 0x8, 0x1, 0x4, 0x3, 0xE, 0x0},
        {0x8, 0xE, 0x2, 0x5, 0x6, 0x9, 0x1, 0xC, 0xF, 0x4, 0xB, 0x0, 0xD, 0xA, 0x3, 0x7},
        {0x1, 0x7, 0xE, 0xD, 0x0, 0x5, 0x8, 0x3, 0x4, 0xF, 0xA, 0x6, 0x9, 0xC, 0xB, 0x2}
    };

    uint32_t basicOperation(uint64_t n, uint32_t keyPart);

    // basic cycles
    uint32_t basicEncrypt(uint32_t n);
    uint32_t basicDecrypt(uint32_t n);
    uint32_t basicMesAuthcode(uint32_t n);

    uint32_t mesAuthCode(const std::vector<uint32_t> &data);
};
